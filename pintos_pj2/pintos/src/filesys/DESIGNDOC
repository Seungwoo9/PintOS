       	       	     +-------------------------+
		     |		CS 140	       |
		     | PROJECT 4: FILE SYSTEMS |
		     |	   DESIGN DOCUMENT     |
		     +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Seungwoo Park <merleawe@kaist.ac.kr>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

		     INDEXED AND EXTENSIBLE FILES
		     ============================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

  //filesys/inode.h
  
  #define DIRECT_BLOCK_ENTRIES 123	    // direct block entry 개수
  #define INDIRECT_BLOCK_ENTRIES 128    // indirect block entry 개수
  
  //filesys/inode.c
  
  struct inode_disk
  {
    ...
    // PJT4 _ Extensible FILE 
    block_sector_t direct_map_table[DIRECT_BLOCK_ENTRIES];    //  direct block sector
    block_sector_t indirect_block_sec;                        // indirect block sector
    block_sector_t double_indirect_block_sec;                 // double indirect sector
    ...
  };
  
  struct indirect_block {
    block_sector_t map_table[INDIRECT_BLOCK_ENTRIES];   // indirect_block 구현
  };
  
  struct inode 
  {
    ...
    struct lock lock_for_ext;                           // extend 구현을 위한 lock
  };
  

>> A2: What is the maximum size of a file supported by your inode
>> structure?  Show your work.

우선, Block 하나의 size는 512Byte이다.
DIRECT Block의 entry가 123개, indirect block entry가 128개 이므로 123 + 128 + 128 * 128 (double indirect block) = 16635개 이다.
따라서, max size는 512 * (123 + 128 + 128 * 128) = 8517120B 이다. (약 8.1MB)

---- SYNCHRONIZATION ----

>> A3: Explain how your code avoids a race if two processes attempt to
>> extend a file at the same time.

lock_for_ext을 이용해서, lock_acquire 및 lock_release를 이용하여 race condition을 방지함.

>> A4: Suppose processes A and B both have file F open, both
>> positioned at end-of-file.  If A reads and B writes F at the same
>> time, A may read all, part, or none of what B writes.  However, A
>> may not read data other than what B writes, e.g. if B writes
>> nonzero data, A is not allowed to see all zeros.  Explain how your
>> code avoids this race.

atomic하게 구현함으로써 방지함.

>> A5: Explain how your synchronization design provides "fairness".
>> File access is "fair" if readers cannot indefinitely block writers
>> or vice versa.  That is, many processes reading from a file cannot
>> prevent forever another process from writing the file, and many
>> processes writing to a file cannot prevent another process forever
>> from reading the file.

read 및 write를 할 때, buffer cache를 거쳐서 동작을 하게 변경됨.
이 때, buffer_cache_lock이 존재하고, 이를 이용해서 scheduling이 이루어지므로, 상대적으로 fair함.

---- RATIONALE ----

>> A6: Is your inode structure a multilevel index?  If so, why did you
>> choose this particular combination of direct, indirect, and doubly
>> indirect blocks?  If not, why did you choose an alternative inode
>> structure, and what advantages and disadvantages does your
>> structure have, compared to a multilevel index?

multilevel로 구현하였으며, (double_indirect_block) inode가 512Byte의 block 내에서, 큰 size의 file을 가리키는 것 또한 구현하기 위해
multilevel을 이용하여 구현함.

			    SUBDIRECTORIES
			    ==============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

	//threads/thread.h
	struct thread
	{
		...
    		struct dir* working_dir;	// thread에서 현재 directory 정보를 저장
		...
	};
	
	//filesys/inode.c
	struct inode_disk
	{
		...
	    	//PJT4_subdirectory
	    	uint32_t dir_or_regular;	// inode가 regular_file을 가리키는지, directory를 가리키는지 구분
	 };


---- ALGORITHMS ----

>> B2: Describe your code for traversing a user-specified path.  How
>> do traversals of absolute and relative paths differ?

이전에 token을 이용하여 file_name을 쪼갠것 처럼, parse_path를 구현하고 이를 이용해 지정된 directory를 분석
root인 /부터 시작하면 absolute path를, 아니라면 working_dir에 저장된 현재 directory를 이용한 relative path를 이용함.


---- SYNCHRONIZATION ----

>> B4: How do you prevent races on directory entries?  For example,
>> only one of two simultaneous attempts to remove a single file
>> should succeed, as should only one of two simultaneous attempts to
>> create a file with the same name, and so on.

lock을 이용해서 race condition 방지.

>> B5: Does your implementation allow a directory to be removed if it
>> is open by a process or if it is in use as a process's current
>> working directory?  If so, what happens to that process's future
>> file system operations?  If not, how do you prevent it?

가능하지만, inode의 removed라는 flag를 통해서, 제거 대상이 되었는지 아닌지를 판단가능하며, 이를 통해, 향후 새롭게 만들거나 여는 것을 막아줌.

---- RATIONALE ----

>> B6: Explain why you chose to represent the current directory of a
>> process the way you did.

교재에 나오며, current directory를 child에 넘길 수 있게됨.

			     BUFFER CACHE
			     ============

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

	//filesys/buffer_cache.h
	struct buffer_head
	{
	    bool dirty;			// dirty flag
	    bool being_used;		// entry가 being used인지 아닌지
	    bool accessed;		// entry가 최근에 accessed 되었는지 아닌지
	    block_sector_t sector;	// sector index
	    void* virtual_address;	// virtual address of the associated buffer cache entry.
	    struct lock lock_buf;	// buffer_cache 이용시, race 방지를 위한 lock
	};

---- ALGORITHMS ----

>> C2: Describe how your cache replacement algorithm chooses a cache
>> block to evict.

clock algorithm을 이용하여 victim을 결정함. 최근에 access되지 않은 것을 찾기 위해 head 내의 accessed가 0인 것을 찾음

>> C3: Describe your implementation of write-behind.

evict될 때 마다 dirty block을 disk에 쓰도록 구현함.

>> C4: Describe your implementation of read-ahead.

...

---- SYNCHRONIZATION ----

>> C5: When one process is actively reading or writing data in a
>> buffer cache block, how are other processes prevented from evicting
>> that block?

lock을 이용함.
read / write를 하고 있을 때, lock을 acquire함으로써 방지됨.

>> C6: During the eviction of a block from the cache, how are other
>> processes prevented from attempting to access the block?

lock을 이용함.

---- RATIONALE ----

>> C7: Describe a file workload likely to benefit from buffer caching,
>> and workloads likely to benefit from read-ahead and write-behind.

buffer-caching의 경우, 같은 file에 자주 접근할 때 유용하며,
read-ahead의 경우, sequential read 등과 같은, 근처의 주소에서 operate하는 경우 유용함.
write-behind의 경우, dirty block을 cache에 두는 것으로, write가 많이 이루어질 때 유용함.
    

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students in future quarters?

>> Any other comments?
