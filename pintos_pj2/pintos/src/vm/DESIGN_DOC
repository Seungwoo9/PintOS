       	       	    +---------------------------+
		    |		CS 140		|
		    | PROJECT 3: VIRTUAL MEMORY	|
		    |	   DESIGN DOCUMENT	|
		    +---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Seungwoo Park <merleawe@kaist.ac.kr>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			PAGE TABLE MANAGEMENT
			=====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

	// threads/thread.h
	struct thread {
	    ...
	    struct hash vm; // vm_entry를 hash table로 구현했으며, 이를 위한 것
			...
	  };
		
	// vm/page.h
  
	enum vme_type {
	   VM_BIN,  // binary인 경우
	   VM_ANON, // anonymous인 경우
	   VM_FILE  // memory-mapped file 의 경우
	 };
   
   struct vm_entry  {
	    enum vme_type type; // case 별 type 설정
	    void* vaddr;        // user virtual address 시작점
      bool writable;      // page에 write 가능한지 여부
	    bool loaded;        // physical frame이 load 되었는지의 여부

	    ...
	  };



---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.

  Demand paging을 통해서, 실제 필요한 부분만 physical frame에 load된다.
  각 페이지마다 virtual address에 해당하는 vm_entry를 할당해서 페이지를 관리하도록 구현하였으며,
  Binary file, anonymous, memory mapped 타입으로 분류해서 필요한 data를 lazy load를 구현.


>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

  user virtual address만 사용하므로, 쉽게 피할 수 있음.

---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

lock을 이용하여 race condition을 방지

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

virtual page와 physical frame을 각각 vm_entry와 page를 이용해서 다루도록 구현.
virtual to physical mapping은 process의 page table마다 저장하고 반대 방향은 vme를 이용해서 swapping이 가능하게 구현.


		       PAGING TO AND FROM DISK
		       =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

		
	// vm/page.h
	struct vm_entry 
	  {
	    ...
	    size_t swap_index; // swap partition 이용 시, bitmap index 
	    ...
	  };

	struct page
	  {
	    void *kaddr; 		// physical address
	    struct thread* thread; 	// page가 속한 thread
	    struct vm_entry* vme;	// 어떤 page frame이 mapping 되었는지
	    struct list_elem lru; 	
	    bool pinned; 		
	  };
	

---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.

page를 evict할 때, clock algorithm을 base로 구현함.
LRU를 기반으로, LRU list를 활용함.

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

Swap에서 해당 경우가 발생할 수 있음.
다른 프로세스의 frame이 할당되는 경우, Q의 프레임이 어떤 종류인지를 파악하고, dirty 여부를 확인한다.
VM_BIN인 경우
 dirty 일 때 : P의 프레임을 swap_out해서 스왑공간에 써둔다.
 dirty가 아닐 때 : 그냥 페이지를 내보내고 Q가 사용한다. 
VM_FILE인 경우
 dirty 일 때 : P의 프레임을 해당 파일의 위치에 쓴다.
 dirty가 아닐 때 : 그냥 페이지를 내보내고 Q가 사용한다.


>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

user address인지, stack size limit을 넘지 않는지, esp stack pointer에서 아래로 32 byte 이내인지 등의 여부를 따져
조건이 만족되면 stack을 expand 한다.


---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

2개의 lock을 이용했지만, circular wait가 발생하지 않게 하여, deadlock을 방지

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

eviction process는 lock을 가지고 있는 thread가 evict_page()를 execute할 수 있다.
evict된 경우 lock을 다시 가져와야만 faultin page back을 할 수 있어 race condition이 방지 된다.

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

swap_lock 및 filesys_lock을 이용해 synchronize 했음.

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

pinning_page 및 unpinning_page를 이용해 buffer를 read, write 시, page를 pin 하고 unpin해줌

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.

single lock을 이용하는 것 보다 multiple lock을 이용하여 구현하여 병렬적으로 이용이 가능했음.

			 MEMORY MAPPED FILES
			 ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

	// threads/thread.h
	struct thread
	  {
			...
	    struct list mmap_list; // memory mapped file의 list
	    int max_mapid_count;   // max mapid를 기록하기 위함
			...
	  };
	

	// vm/page.h
	struct mmap_file 
	  {
	    int mapid; 			// memory mapped file의 id
	    struct file *file;  	
	    struct list_elem elem; 	
	    struct list vme_list; 	// vm_entry의 list
	  }

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

mmap을 이용하면, PGSIZE 잔위로 vm_entry를 만들고, 그것을 mmap_file의 vme_list에 넣어줌.
page_fault 발생시, address에 해당하는 vm_entry의 정보를 이용해 load하고,
dirty인 경우, evict할 때, write back한 후, evict한다.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

file을 mmap하는 경우, 새로운 vm entry를 만들어서 mmap 한다.
따라서 overlap되는 경우는 없음.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

type만 다르고 load해오는 부분은 같기 때문에 거의 비슷하게 code를 share함.
			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
