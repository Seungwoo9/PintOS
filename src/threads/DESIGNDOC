            +--------------------+
            |        EE 415      |
            | PROJECT 1: THREADS |
            |   DESIGN DOCUMENT  |
            +--------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

SEUNGWOO PARK <merleawe@kaist.ac.kr>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

1. OSLAB homepage & Youtube channel
2. lecture slide (Pintos_Part1_Thread _00~02)
3. Q&A session (at piazza)

                 ALARM CLOCK
                 ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

@threads/thread.h
int wake_up_tick (struct thread 안의 멤버 변수)    
    깨어나야할 tick을 저장해서, sleep_list에 있는 thread를 깨울 때 이용
    
@threads/thread.c
static struct list sleep_list
    sleep_queue를 만들어 줌
static int64_t min_value_of_ticks;
    sleep_list 내부의 thread 들의 wake_up_tick 중 가장 작은 값을 저장하여, 이 이상의 tick에서 thread_awake가 일어나도록 함.
    

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

timer_sleep() 함수가 call 되면, thread는 target으로 하는 wake_up_tick값을 가지고, sleep_list로 넣어지고, BlOCKED STATE가 됨
timer_interrupt에서, wake_up_tick 중에서 가장 낮은 값보다 tick이 크면, thread_awake를 실행하며, thread 별로 주어진 wake_up_tick 값에 부합하면, thread를 깨움.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

sleep_list를 wake_up_tick의 순서대로 정렬해서 넣음으로써, timer_interrupt_handler에서의 시간을 최소화 시킴.
거기에 더하여, min_value_of_ticks에 sleep_list 내부 thread 들 중 가장 작은 wake_up_tick 값을 저장하여, 이 이상의 tick 에서만 thread_awake가 일어나게 하여
timer_interrupt handler에서 시간 소모를 최소화 함.


---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

interrupt 가 disable 일 때, list operation이 진행됨.


>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

interrupt 가 disable 상태임.

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

busy-waiting의 경우, 매우 비효율 적으로 진행이 되어, 많은 시간을 낭비하게 됨.
따라서, busy-waiting 말고, sleep/wakeup 으로 만들어 줌.


             PRIORITY SCHEDULING
             ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

@ threads/thread.h
struct thread
{
            ...
    //PJT1-2
    int init_priority;                          <-- thread가 priority를 양도 받았다가, 다시 반납할 때, 초기값을 기억하기 위함
    struct lock* wait_on_lock;                  <-- thread가 얻고자 하는 lock
    struct list donations;                      <-- priority를 나누어준 thread들의 list
    struct list_elem donation_elem;             <-- list 관리를 위한 element
    //PJT1-2 END
            ...
};


>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

위에 언급된 추가된 init_priority 및 list donations 등을 이용하여 priority donation을 구현함.
nested donation의 경우 총 3개의 priority L,M,H의 thread가 있다고 하고, thread L이 lock A를 hold 하고, thread M이 lock B를 가지고 lock A를 요청하였으며,
thread H가 lock B를 요청한 경우, 여러번의 단계적 donation이 일어나야 한다.

이 경우, donate_priority() 함수로 구현하였으며, wait_on_lock->holder의 thread를 가져와서, holder의 priority에 donation을 해준다.
for 문을 통하여, cur에 들어가는 thread를 holder로 변경해주며 for문을 돌고, 만약 wait_on_lock이 없다면 (즉, 요청한 lock이 없다면) donation할 것이 없으므로, for문을 탈출한다.

1st. begin
---------------                                      ---------------                                      --------------- 
| thread L    |        lock A                        | thread M    |        lock B                        | thread H    |
---------------  <---  holder                        ---------------  <---  holder                        --------------- 
|priority = L |                                      |priority = M |                                      |priority = H |
---------------                                      ---------------                                      --------------- 

2nd. thread M이 L에게 lock A 요청 후, donate-priority
---------------                                      ---------------                                      --------------- 
| thread L    |        lock A <----wait_on_lock----  | thread M    |        lock B                        | thread H    |
---------------  <---  holder                        ---------------  <---  holder                        --------------- 
|priority = M |                                      |priority = M |                                      |priority = H |
---------------                                      ---------------                                      --------------- 

3rd. thread H가 M에게 lock B 요청, donate_priority
---------------                                      ---------------                                      --------------- 
| thread L    |        lock A <----wait_on_lock----  | thread M    |        lock B <----wait_on_lock----  | thread H    |
---------------  <---  holder                        ---------------  <---  holder                        --------------- 
|priority = H |                                      |priority = H |                                      |priority = H |
---------------                                      ---------------                                      --------------- 

4th. lock A 반환 (thread M 이 A 획득)
---------------                                      ---------------                                      --------------- 
| thread L    |        lock A                        | thread M    |        lock B <----wait_on_lock----  | thread H    |
---------------        holder ------------------->   ---------------  <---  holder                        --------------- 
|priority = L |                                      |priority = H |                                      |priority = H |
---------------                                      ---------------                                      --------------- 

5th. lock B 반환 및 그 후 종료
---------------                                      ---------------                                      --------------- 
| thread L    |                                      | thread M    |                                      | thread H    |
---------------                                      ---------------                                      --------------- 
|priority = L |                                      |priority = M |                                      |priority = H |
---------------                                      ---------------                                      --------------- 




---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

list 자체를 priority를 비교하는 함수를 이용하여 배열함 (cmp_priority 및 list_insert_ordered 함수 이용)

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

위에서 언급한 donate_priority() 함수가 lock_acquire 안에 들어가있음. 이를 통해 nested donation을 handle 할 수 있음.
lock_acquire 함수를 call하면, 
우선, 해당 lock에 holder가 있는지 확인
있다면, current thread의 wait_on_lock에 lock을 추가하고,
해당 lock의 donation list에 current thread를 추가하며, (이 때, priority 순으로 정렬해서 넣어줌)
그 후, donate_priority를 실행

이후에 sema_down을 실행해서 lock을 점유할 때 까지 기다리며,
점유 후, wait_on_lock을 지우고, lock의 holder를 current thread로 바꿔줌


>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

lock_release가 실행되면, 해당 lock이 wait_on_list에 있는 thread를 donation list에서 제거하고, priority를 재정비 해준 다음
lock의 holder를 비워주고, sema_up을 이용해 semaphore를 재정비 해준다.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

thread_set_priority 함수 안에서,
refresh_priority를 통해서, 다시 한 번 더, priority 순서대로 정렬을 해줌.

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

OS를 처음 접하기에, 직관적으로 알아보기 쉬운 구조로 design하게 되었음.


              ADVANCED SCHEDULER
              ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

@threads/thread.h
struct thread
{
     ...
     
    //PJT1-3
    int nice;           <-- thread의 nice 값을 저장하기 위함
    int recent_cpu;     <-- thread의 recent_cpu 값을 저장
    //PJT1-3 END
    
     ...
};

@threads/thread.c
int load_avg;           <-- load_avg 저장하기 위한 전역 변수


---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

100tick에 1초이므로, 초에 의한 것은 생각 X load_avg=0

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0      0   1   2  63  61  59   A
 4      4   1   2  62  61  59   A
 8      8   1   2  61  61  59   B
12      8   5   2  61  60  59   A
16     12   5   2  60  60  59   B
20     12   9   2  60  59  59   A
24     16   9   2  59  59  59   C
28     16   9   6  59  59  58   B
32     16  13   6  59  58  58   A
36     20  13   6  58  58  58   C

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

우선, 100tick에 1초로 계산하여, 초당 계산하는 것이 없었고, load_avg가 0일 때를 가정함.
priority가 같아지는 경우가 생겨 모호해졌으며, 이 경우, Least Recently Used Thread를 Run 하도록 가정함.


>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

load_avg나 recent_cpu 계산에 너무 많은 시간을 소모하게 되면, 결국 load_avg를 높이고 recent_cpu 값을 높이는 등의 악순환이 생길 것.


---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

int를 가지고 fixed_point 계산식을 구현하여, recent_cpu , load_avg 등의 실수도 같이 표현할 수 있게함.
priority 및 nice, load_avg, recent_cpu를 이용하여 계산을 진행하고, 조절된 priority를 가지고 4.4BSD scheduler를 구현

시간이 더 있다면, multi-level queue에 대해 좀 더 공부하고 적용해보고 싶음.

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

앞서 언급한 것처럼, load_avg 및 recent_cpu값은 실수 형태이다.
pintos에서 floating point 수를 구현하기 위해서, int형을 통하여 fixed_point.h 파일에 구현을 하였음.

#define macro를 통하여, MIN, MAX 값과 정수 1을 구현하였으며, inline fuction 보다 빠르게 동작할 수 있음.

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

혼자하기 어려웠으며, 굉장히 오래걸렸습니다...

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

OS design에 관한 insight를 키우는 것에는 큰 도움이 되었습니다.

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

처음에는 어떤 방향으로 해야하는지 아리송 했지만,
Q&A를 통해서 알아나갔습니다.
Piazza를 통해서, Q&A를 잘 해주시는 것 같습니다.

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

없습니다.

>> Any other comments?
